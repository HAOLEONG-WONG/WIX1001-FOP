package org.example;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        LoginPage loginPage = new LoginPage();
        loginPage.displayLoginPage();  // Call LoginPage to display the login page

        LoginPage.saveData();
    }
}

//______________________________________________________________________________________________________________________________________________________________________________________________________________

// Student class, store student information
class Student implements Serializable {
    private String id;
    private String password;
    private String email;
    private String studentClass;  // Changed from 'class' to 'studentClass'
    private String societies;  // Single input for Societies
    private String uniformBody; // Single input for Uniform Body
    private String sportsClub; // Single input for Sports Club

    public Student(String id, String password, String email, String studentClass, String societies, String uniformBody, String sportsClub) {
        this.id = id;
        this.password = password;
        this.email = email;
        this.studentClass = studentClass;  // Updated variable name
        this.societies = societies;
        this.uniformBody = uniformBody;
        this.sportsClub = sportsClub;
    }

    public String getId() {
        return id;
    }

    public String getPassword() {
        return password;
    }

    public String getEmail() {
        return email;
    }

    public String getStudentClass() {
        return studentClass;  // Updated method name
    }

    public String getSocieties() {
        return societies;
    }

    public String getUniformBody() {
        return uniformBody;
    }

    public String getSportsClub() {
        return sportsClub;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

//______________________________________________________________________________________________________________________________________________________________________________________________________________

// Login page to handle student login
class LoginPage {
    private static Map<String, Student> studentDatabase = new HashMap<>();
    private static Scanner scanner = new Scanner(System.in);

    public LoginPage() {
        loadData();  // Load data when LoginPage is created
    }

    // Save student data to a file
    public static void saveData() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("UserData.txt"))) {
            for (Student student : studentDatabase.values()) {
                String studentInfo = String.format("%s\n%s\n%s\n%s\n%s,%s,%s",
                        student.getEmail(), student.getId(), student.getPassword(), student.getStudentClass(),
                        student.getSocieties(), student.getUniformBody(), student.getSportsClub());
                writer.write(studentInfo);
                writer.write("\n\n");  // Empty line to separate each student
            }
            System.out.println("Data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving data: " + e.getMessage());
        }
    }

    // Load student data from the file
    public static void loadData() {
        try (BufferedReader reader = new BufferedReader(new FileReader("studentData.txt"))) {
            String line;
            String email = "", id = "", password = "", societies = "", uniformBody = "", sportsClub = "", studentClass = "";
            Student student = null;

            while ((line = reader.readLine()) != null) {
                if (line.isEmpty()) {  // An empty line signifies the end of a student's data
                    if (!email.isEmpty() && !id.isEmpty()) {
                        student = new Student(id, password, email, studentClass, societies, uniformBody, sportsClub); // Ensure all fields are passed
                        studentDatabase.put(id, student);
                        // Reset fields for the next student
                        email = id = password = studentClass = societies = uniformBody = sportsClub = "";
                    }
                } else {
                    // Parse each piece of student information
                    if (email.isEmpty()) {
                        email = line.trim();
                    } else if (id.isEmpty()) {
                        id = line.trim();
                    } else if (password.isEmpty()) {
                        password = line.trim();
                    } else if (studentClass.isEmpty()) {
                        studentClass = line.trim();
                    } else if (societies.isEmpty()) {
                        societies = line.trim();
                    } else if (uniformBody.isEmpty()) {
                        uniformBody = line.trim();
                    } else if (sportsClub.isEmpty()) {
                        sportsClub = line.trim();
                    }
                }
            }

            // Handle last student in case no trailing empty line
            if (!email.isEmpty() && !id.isEmpty()) {
                student = new Student(id, password, email, studentClass, societies, uniformBody, sportsClub);
                studentDatabase.put(id, student);
            }

            System.out.println("Data loaded successfully.");
        } catch (IOException e) {
            System.out.println("No previous data found. Starting fresh.");
        }
    }



    public void displayLoginPage() {
        System.out.println("Welcome to the Student Portal");
        System.out.println("Do you have an account? (yes/no)");
        String answer = scanner.nextLine();

        if (answer.equalsIgnoreCase("yes")) {
            startLogin();  // Login
        } else if (answer.equalsIgnoreCase("no")) {
            StudentRegistration.registerStudent();  // Register a new account
        } else {
            System.out.println("Invalid choice. Please try again.");
            displayLoginPage();
        }
    }

    public static void startLogin() {
        System.out.print("Student ID: ");
        String studentID = scanner.nextLine();

        System.out.print("Password: ");
        String password = scanner.nextLine();

        if (studentDatabase.containsKey(studentID)) {
            Student student = studentDatabase.get(studentID);
            if (student.getPassword().equals(password)) {
                System.out.println("Login successful!");
                startNextPage(student);
            } else {
                System.out.println("Incorrect password!");
                handleRetry();
            }
        } else {
            System.out.println("Incorrect Student ID!");
            handleRetry();
        }
    }

    private static void handleRetry() {
        System.out.println("Do you want to try again or reset your password? (retry/reset/exit)");
        String choice = scanner.nextLine();

        if (choice.equalsIgnoreCase("retry")) {
            startLogin();
        } else if (choice.equalsIgnoreCase("reset")) {
            ResetPassword.resetPassword();
        } else if (choice.equalsIgnoreCase("exit")) {
            saveData();  // Save data
            System.out.println("Goodbye!");
            scanner.close();
            System.exit(0);
        } else {
            System.out.println("Invalid choice, try again.");
            handleRetry();
        }
    }

    static void startNextPage(Student student) {
        // Other page logic can be added here
    }

    public static void updatePassword(String studentID, String newPassword) {
        if (studentDatabase.containsKey(studentID)) {
            studentDatabase.get(studentID).setPassword(newPassword);
            System.out.println("Password updated successfully.");
        }
    }

    public static Map<String, Student> getStudentDatabase() {
        return studentDatabase;
    }
}

//______________________________________________________________________________________________________________________________________________________________________________________________________________

// Registration page to handle student registration
class StudentRegistration {
    private static Scanner scanner = new Scanner(System.in);

    public static void registerStudent() {
        System.out.println("Create your Student Account");

        //System.out.println("using \"back\" to go to last page");

        System.out.print("Enter your email: ");
        String email = scanner.nextLine();

        System.out.print("Enter your Student ID: ");
        String id = scanner.nextLine();

        // Check if ID is already registered
        if (LoginPage.getStudentDatabase().containsKey(id)) {
            System.out.println("Student ID has already been registered. Please use a different ID.");
            registerStudent();
        }

        System.out.print("Enter your password: ");
        String password = scanner.nextLine();

        String studentClass = "";
        String quit = "";
        while (true) {
            System.out.print("Enter your courses[\"quit\" to quit]: ");
            quit = scanner.nextLine();
            if (quit.equalsIgnoreCase("quit")) {
                break;
            }
            if (studentClass.isEmpty()) {
                studentClass = quit;
            } else {
                studentClass += "," + quit;
            }
        }


        System.out.print("Enter your Society: ");
        String societies = scanner.nextLine();

        System.out.print("Enter your Uniform Body: ");
        String uniformBody = scanner.nextLine();

        System.out.print("Enter your Sports Club: ");
        String sportsClub = scanner.nextLine();

        // Create new student and save to database
        Student student = new Student(id, password, email, studentClass, societies, uniformBody, sportsClub);
        LoginPage.getStudentDatabase().put(id, student);  // Save the student in the database
        LoginPage.saveData();  // Save to file

        System.out.println("\nStudent Registration Complete!");
        System.out.println("Email: " + email);
        System.out.println("Student ID: " + id);
        System.out.println("Password: " + password);
        System.out.println("Class: " + studentClass);
        System.out.println("Society: " + societies);
        System.out.println("Uniform Body: " + uniformBody);
        System.out.println("Sports Club: " + sportsClub);
        LoginPage loginPage = new LoginPage();

        System.out.println();
        System.out.println();

        loginPage.displayLoginPage();
    }

    public static void main(String[] args) {
        registerStudent();
    }
}

//______________________________________________________________________________________________________________________________________________________________________________________________________________

// Reset password functionality
class ResetPassword {
    private static Scanner scanner = new Scanner(System.in);

    private static Map<String, String> verificationCodes = new HashMap<>();
    private static Map<String, Long> verificationCodeTimestamps = new HashMap<>();

    public static void resetPassword() {
        System.out.print("Please enter your email address: ");
        String email = scanner.nextLine();

        Student student = findStudentByEmail(email);
        if (student == null) {
            System.out.println("Student with the provided email not found.");
            return;
        }

        System.out.println("Sending a verification code to your email...");
        if (!sendVerificationCode(email)) {
            System.out.println("Failed to send verification code. Please try again later.");
            return;
        }

        System.out.print("Enter the verification code: ");
        String code = scanner.nextLine();
        while(true) {
            if (verifyCode(email, code)) {
                System.out.print("Enter new password: ");
                String newPassword = scanner.nextLine();
                LoginPage.updatePassword(student.getId(), newPassword); // Update password
                LoginPage.saveData();  // Save data to file
                System.out.println("Password reset successful.");

                return;
            } else {
                System.out.println("Verification failed. Please try again.");
                code = scanner.nextLine();
            }
        }
    }

    // Find student by email
    public static Student findStudentByEmail(String email) {
        for (Student student : LoginPage.getStudentDatabase().values()) {
            if (student.getEmail().equalsIgnoreCase(email)) {
                return student;
            }
        }
        return null;
    }

    public static boolean sendVerificationCode(String email) {
        String code = EmailService.generateCode();
        verificationCodes.put(email, code);
        verificationCodeTimestamps.put(email, System.currentTimeMillis());
        return EmailService.sendEmail(email, code);
    }

    public static boolean verifyCode(String email, String code) {
        String storedCode = verificationCodes.get(email);
        Long timestamp = verificationCodeTimestamps.get(email);

        if (storedCode == null || timestamp == null) return false;

        long currentTime = System.currentTimeMillis();
        if (currentTime - timestamp > 5 * 60 * 1000) { // 5 minutes timeout
            System.out.println("Verification code expired.");
            return false;
        }

        return storedCode.equals(code);
    }
}
